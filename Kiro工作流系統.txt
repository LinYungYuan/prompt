# Kiro Spec工作流系統 - 強化版本

## 系統概述

Kiro Spec工作流是一個標準化的軟體開發規格制定系統，嚴格按照三階段順序執行：**需求收集** → **系統設計** → **實現計劃**。每個階段必須完成所有交付物並獲得用戶明確書面確認後，方可進入下一階段。

### 核心原則
- **階段門檻控制**：未經用戶明確批准，絕對不允許跳過或合併階段
- **文檔標準化**：所有輸出必須遵循預定義模板格式
- **可追溯性**：每個決策都必須有明確的依據和理由
- **完整性驗證**：每階段結束前必須進行完整性檢查清單確認

## 階段一：需求收集（Requirements Gathering）

### 目標
生成符合EARS（Easy Approach to Requirements Syntax）標準的需求文檔

### 強制約束條件
1. **文檔創建**：必須創建 `.claude/specs/{feature_name}/requirements.md` 文件
2. **模板遵循**：嚴格使用Kiro標準化需求模板
3. **語法標準**：所有需求必須遵循EARS語法結構
4. **初始生成**：基於用戶粗略描述生成初始需求版本，不得要求用戶提供完整細節

### EARS語法示例格式
```
當  時，系統應該 
如果 ，則當  時，系統應該 
在  期間，系統應該 
系統應該能夠 
```

### 需求文檔必要章節
1. **功能需求（Functional Requirements）**
   - 核心功能描述
   - 用戶交互場景
   - 系統行為定義

2. **非功能需求（Non-Functional Requirements）**
   - 性能指標（響應時間、吞吐量）
   - 可靠性要求（可用性、容錯性）
   - 安全性要求（認證、授權、加密）
   - 可擴展性需求
   - 兼容性要求

3. **邊界條件（Boundary Conditions）**
   - 輸入數據限制
   - 系統負載極限
   - 異常情況處理

4. **用戶體驗需求（User Experience Requirements）**
   - 可用性標準
   - 無障礙設計要求
   - 響應時間期望

5. **技術約束（Technical Constraints）**
   - 技術棧限制
   - 第三方服務依賴
   - 部署環境要求

6. **成功標準（Success Criteria）**
   - 可測量的驗收標準
   - 性能基準
   - 質量指標

### 需求完整性檢查清單
- [ ] 所有需求都使用EARS語法格式
- [ ] 涵蓋所有主要用戶場景
- [ ] 定義了錯誤和異常處理
- [ ] 包含性能和安全需求
- [ ] 每個需求都可測試和驗證
- [ ] 需求之間無衝突
- [ ] 包含了邊界條件和限制

### 階段結束確認
完成需求文檔後，必須詢問：
> "需求文檔已完成，包含X個功能需求和Y個非功能需求。請仔細審查後明確回復：'需求文檔批准，進入設計階段' 或提出具體修改意見。"

**重要**：必須等待用戶明確批准文字確認才能進入下一階段。

## 階段二：系統設計（Design Document Creation）

### 目標
基於已批准需求創建詳細的系統設計文檔

### 強制約束條件
1. **文檔創建**：必須創建 `.claude/specs/{feature_name}/design.md` 文件
2. **需求追溯**：每個設計決策必須明確對應到需求文檔中的具體需求
3. **視覺化要求**：必須包含架構圖和流程圖（使用Mermaid語法）
4. **接口定義**：所有組件接口必須完整定義（包含輸入/輸出/錯誤處理）

### 設計文檔必要章節

#### 1. 概述（Overview）
- 系統整體描述
- 核心設計理念
- 關鍵技術選型及理由

#### 2. 架構設計（Architecture）
```mermaid
graph TB
    A[前端層] --> B[API網關]
    B --> C[業務邏輯層]
    C --> D[數據訪問層]
    D --> E[數據庫]
```
- 系統層次架構
- 組件分布圖
- 部署架構圖

#### 3. 組件和接口（Components and Interfaces）
每個組件必須包含：
- **職責描述**：組件的核心功能
- **接口定義**：
  ```typescript
  interface ComponentInterface {
    method(input: InputType): Promise
    handleError(error: ErrorType): ErrorResponse
  }
  ```
- **依賴關係**：與其他組件的依賴關係圖
- **生命週期**：組件的創建、運行、銷毀過程

#### 4. 數據模型（Data Models）
```mermaid
erDiagram
    User ||--o{ Session : has
    User {
        int id
        string username
        string email
        datetime created_at
    }
```
- 實體關係圖
- 數據結構定義
- 數據流向圖
- 存儲策略

#### 5. 安全設計（Security Design）
- 認證機制設計
- 授權模型
- 數據加密策略
- 安全威脅分析和對策

#### 6. 錯誤處理策略（Error Handling Strategy）
- 錯誤分類體系
- 錯誤恢復機制
- 日誌記錄策略
- 用戶友好錯誤信息設計

#### 7. 性能設計（Performance Design）
- 性能目標定義
- 瓶頸分析
- 優化策略
- 監控方案

#### 8. 測試策略（Testing Strategy）
- 單元測試計劃
- 集成測試方案
- E2E測試場景
- 性能測試計劃

### 設計完整性檢查清單
- [ ] 所有需求都有對應的設計方案
- [ ] 架構圖清晰且完整
- [ ] 所有組件接口都已定義
- [ ] 數據模型支持所有業務場景
- [ ] 錯誤處理覆蓋所有異常情況
- [ ] 設計支持非功能需求
- [ ] 包含詳細的測試策略

### 階段結束確認
完成設計文檔後，必須詢問：
> "系統設計文檔已完成，包含X個核心組件和Y個接口定義。所有設計決策都已說明理由。請審查後明確回復：'設計文檔批准，進入實現計劃階段' 或提出具體修改意見。"

## 階段三：實現計劃（Implementation Planning）

### 目標
將設計轉換為可執行的開發任務計劃

### 強制約束條件
1. **文檔創建**：必須創建 `.claude/specs/{feature_name}/tasks.md` 文件
2. **任務分解**：每個任務必須足夠具體，預估工時不超過8小時
3. **依賴管理**：明確標識任務間的依賴關係
4. **里程碑定義**：設定可測量的階段性目標

### 實現計劃文檔必要章節

#### 1. 項目概要（Project Summary）
- 總體時程估算
- 關鍵里程碑
- 資源需求評估
- 風險識別與對策

#### 2. 任務分解結構（Work Breakdown Structure）

##### 任務模板格式：
```markdown
### 任務ID：T001
**任務名稱**：用戶認證模組實現
**描述**：實現用戶登錄、註冊和密碼重置功能
**優先級**：高（P1）
**預估工時**：6小時
**前置依賴**：無
**後續任務**：T002, T003
**驗收標準**：
- [ ] 用戶可以成功註冊
- [ ] 用戶可以正常登錄
- [ ] 密碼錯誤時顯示適當錯誤信息
- [ ] 通過所有單元測試
**技術細節**：
- 使用JWT進行身份驗證
- 密碼使用bcrypt加密
- 實現速率限制防止暴力攻擊
```

#### 3. 開發階段規劃

##### 階段一：基礎設施搭建（週1-2）
- 開發環境配置
- 數據庫設計和創建
- 基礎框架搭建
- CI/CD流程建立

##### 階段二：核心功能開發（週3-6）
- 用戶管理模組
- 認證授權系統
- 核心業務邏輯
- API接口實現

##### 階段三：前端實現（週7-9）
- 用戶界面開發
- 前後端集成
- 響應式設計實現
- 用戶體驗優化

##### 階段四：測試和優化（週10-11）
- 綜合測試執行
- 性能調優
- 安全測試
- 用戶驗收測試

##### 階段五：部署和上線（週12）
- 生產環境部署
- 監控配置
- 用戶培訓
- 上線支持

#### 4. 依賴關係圖
```mermaid
gantt
    title 實現計劃甘特圖
    dateFormat  YYYY-MM-DD
    section 基礎設施
    環境配置    :2024-01-01, 3d
    數據庫設計  :2024-01-04, 2d
    section 後端開發
    用戶模組    :2024-01-06, 5d
    認證系統    :after 用戶模組, 4d
```

#### 5. 質量保證計劃
- **代碼審查標準**：每個PR必須經過至少2人審查
- **測試覆蓋率要求**：單元測試覆蓋率不低於80％
- **性能基準**：API響應時間不超過200ms
- **安全檢查**：使用自動化工具進行安全掃描

#### 6. 風險管理
| 風險 | 影響程度 | 發生機率 | 應對策略 |
|------|----------|----------|----------|
| 第三方API不穩定 | 高 | 中 | 實現備用方案和重試機制 |
| 性能不達標 | 中 | 低 | 提前進行性能測試和優化 |

#### 7. 交付物清單
- [ ] 可運行的軟體系統
- [ ] 完整的技術文檔
- [ ] 測試報告
- [ ] 部署指南
- [ ] 用戶手冊

### 實現計劃完整性檢查清單
- [ ] 所有設計組件都有對應實現任務
- [ ] 任務分解足夠細緻，工時估算合理
- [ ] 依賴關係清晰且無循環依賴
- [ ] 包含完整的測試和質量保證計劃
- [ ] 風險識別充分且有應對措施
- [ ] 里程碑設定合理且可測量

### 最終確認
完成實現計劃後，必須提供：
> "實現計劃已完成，包含X個開發任務，預計總工時Y小時，計劃在Z週內完成。請審查完整的三階段文檔（需求、設計、實現計劃）後提供最終確認。"

## 全流程質量控制

### 階段間一致性檢查
每個階段結束時必須驗證：
1. **向前追溯**：當前階段是否完全覆蓋了前一階段的所有內容
2. **向後驗證**：當前階段的所有內容是否都有前一階段的依據

### 文檔版本控制
- 所有文檔必須包含版本號和修改記錄
- 階段間的修改必須獲得用戶確認
- 保持所有階段文檔的同步更新

### 最終交付確認
三個階段全部完成後，提供：
```
📋 Kiro Spec工作流完成總結

✅ 需求收集階段：requirements.md
✅ 系統設計階段：design.md  
✅ 實現計劃階段：tasks.md

所有階段已通過用戶確認，規格制定工作完成。
可以開始按照實現計劃進行開發工作。
```

這個強化版本提供了更明確的指導、更嚴格的質量控制，以及更完整的交付標準。
